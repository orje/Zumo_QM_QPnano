<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.1" links="0">
 <documentation>A simple version to let the Zumo drive freely and try to avoid barriers. The
Zumo is started with a button. Only the proximity sensors are used to detect barriers and then the motors are controlled according to the measure values.
When a barrier is too near the Zumo turns around. The program goes cyclic
around between measurement and motor control.</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Zumo" superclass="qpn::QActive">
   <documentation>encoders.getCountsLeft();
encoders.getCountsRight();</documentation>
   <attribute name="leftProx = 0;" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>variable for the left proximity measure value</documentation>
   </attribute>
   <attribute name="rightProx = 0;" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>variable for the right proximity measure value</documentation>
   </attribute>
   <attribute name="leftSpeed = 0;" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>variable for the left motor speed</documentation>
   </attribute>
   <attribute name="rightSpeed = 0;" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>variable for the right motor speed</documentation>
   </attribute>
   <statechart properties="0x01">
    <initial target="../1">
     <action>lcd.print(&quot;press A&quot;);</action>
     <initial_glyph conn="2,4,5,3,3">
      <action box="0,-2,4,2"/>
     </initial_glyph>
    </initial>
    <state name="start">
     <entry>if (buttonA.isPressed()) {
    lcd.clear();
    QACTIVE_POST((QActive *)me,
    BUTTON_SIG, 0U);
    }

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC/5U, 0U);</entry>
     <tran trig="BUTTON" target="../2">
      <tran_glyph conn="5,8,3,3,8">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="60,59,1,3,-55">
       <action box="-11,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state name="drive_control">
      <entry>compass.read();

lcd.clear();
lcd.gotoXY(0, 0);
lcd.print(&quot;x &quot;);
lcd.print(compass.a.x);
lcd.gotoXY(0, 1);
lcd.print(&quot;y &quot;);
lcd.print(compass.a.y);

if((compass.a.x &lt; collisionDetect) || (compass.a.y &lt; collisionDetect)) {
    QACTIVE_POST((QActive *)me, COLLISION_SIG, 0U);
    }
else {
    QACTIVE_POST((QActive *)me, FREE_SIG, 0U);
    }

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC / 10U, 0U);</entry>
      <tran trig="COLLISION" target="../3">
       <action>ledRed(1);
ledYellow(0);
ledGreen(0);</action>
       <tran_glyph conn="13,12,3,3,12">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="FREE" target="../4">
       <tran_glyph conn="13,28,3,3,12">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="Q_TIMEOUT" target="..">
       <tran_glyph conn="58,54,1,3,-45">
        <action box="-11,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state name="drive_backwards">
       <entry>motors.setSpeeds(-turnSpeed, -turnSpeed);

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC * 50U, 0U);</entry>
       <tran trig="Q_TIMEOUT" target="../1">
        <tran_glyph conn="25,16,3,3,18">
         <action box="0,-2,11,2"/>
        </tran_glyph>
       </tran>
       <state name="turn">
        <entry>motors.setSpeeds(turnSpeed, -turnSpeed);

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC * 50U, 0U);</entry>
        <tran trig="Q_TIMEOUT" target="../../..">
         <tran_glyph conn="54,20,1,3,-41">
          <action box="-11,-2,11,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="43,14,11,8">
         <entry box="1,2,4,2"/>
        </state_glyph>
       </state>
       <state_glyph node="25,10,31,14">
        <entry box="1,2,4,2"/>
       </state_glyph>
      </state>
      <state name="drive">
       <entry>proxSensors.read();
me-&gt;leftProx =
    proxSensors.countsFrontWithLeftLeds();
me-&gt;rightProx =
    proxSensors.countsFrontWithRightLeds();

lcd.clear();
lcd.gotoXY(0, 0);
lcd.print(&quot;l=&quot;);
lcd.print(me-&gt;leftProx);
lcd.print(&quot;  r=&quot;);
lcd.print(me-&gt;rightProx);

QACTIVE_POST((QActive *)me, DECIDE_SIG, 0U);</entry>
       <tran trig="DECIDE">
        <choice target="../../1">
         <guard brief="s&lt;5">me-&gt;leftProx &lt; 5U
&amp;&amp; me-&gt;rightProx &lt; 5U</guard>
         <action>ledRed(0);
ledYellow(0);
ledGreen(1);</action>
         <choice_glyph conn="35,32,5,3,8">
          <action box="1,-2,5,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../2">
         <guard brief="sL&gt;=5">me-&gt;leftProx &gt;= 5U</guard>
         <action>ledRed(0);
ledYellow(1);
ledGreen(0);</action>
         <choice_glyph conn="35,32,4,3,7,8">
          <action box="0,5,7,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../3">
         <guard brief="sR&gt;=5">me-&gt;rightProx &gt;= 5U</guard>
         <action>ledRed(0);
ledYellow(1);
ledGreen(0);</action>
         <choice_glyph conn="35,32,4,3,14,8">
          <action box="0,12,7,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="25,32,3,-1,10">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state name="ctrl">
        <entry>me-&gt;leftSpeed = a * me-&gt;rightProx + e;
me-&gt;rightSpeed = a * me-&gt;leftProx + e;

motors.setSpeeds(me-&gt;leftSpeed, me-&gt;rightSpeed);

lcd.gotoXY(0, 1);
//lcd.print(me-&gt;leftSpeed);
lcd.print(' ');
//lcd.print(me-&gt;rightSpeed);</entry>
        <state_glyph node="43,30,11,5">
         <entry box="1,2,4,2"/>
        </state_glyph>
       </state>
       <state name="turnRight">
        <entry>motors.setSpeeds(turnSpeed, 0U);

lcd.gotoXY(0, 1);
//lcd.print(me-&gt;leftSpeed);
lcd.print(' ');
//lcd.print(me-&gt;rightSpeed);</entry>
        <state_glyph node="43,37,11,5">
         <entry box="1,2,4,2"/>
        </state_glyph>
       </state>
       <state name="turnLeft">
        <entry>motors.setSpeeds(0U, turnSpeed);

lcd.gotoXY(0, 1);
//lcd.print(me-&gt;leftSpeed);
lcd.print(' ');
//lcd.print(me-&gt;rightSpeed);</entry>
        <state_glyph node="43,44,11,5">
         <entry box="1,2,4,2"/>
        </state_glyph>
       </state>
       <state_glyph node="25,26,31,25">
        <entry box="1,2,4,2"/>
       </state_glyph>
      </state>
      <state_glyph node="13,6,45,50">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state_glyph node="5,2,55,59">
      <entry box="1,2,4,2"/>
     </state_glyph>
    </state>
    <state_diagram size="62,63"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot; // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::Zumo)
//...

// AO instances, other objects and event queue buffers for them...
Zumo AO_Zumo;

// Other objects
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
LSM303 compass;
// Zumo32U4Encoders encoders;

static QEvt l_zumoQSto[10]; // Event queue storage for Zumo
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        {(QActive *)0,        (QEvt *)0,  0U               },
        {(QActive *)&amp;AO_Zumo, l_zumoQSto, Q_DIM(l_zumoQSto)}
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100U, // number of system clock ticks in one second

    collisionDetect = -1000,  // experimental threshold

    // Funktionsgleichung: y = a * x + e
    a =  -50,                 // Steigung f√ºr's Regeln
    e = 300U,                 // Scheitelpunkt y

    turnSpeed = 80            // speed for turning around
};

// various signals for the application...
enum {
    BUTTON_SIG = Q_USER_SIG,  // end of data
    COLLISION_SIG,
    FREE_SIG,
    DECIDE_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Zumo.super, Q_STATE_CAST(&amp;Zumo_initial));

    // init the compass for collision detection
    Wire.begin();
    compass.init();
    compass.enableDefault();

    // init the proximity sensors
    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A); // Interrupt enabled
TCNT4  = 0U;

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Zumo)
//...
</text>
  </file>
 </directory>
</model>
