<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.1" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Zumo" superclass="qpn::QActive">
   <documentation>ledRed(0);
ledYellow(0);
ledGreen(0);</documentation>
   <attribute name="leftSpeed = 0;" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>variable for the left motor speed</documentation>
   </attribute>
   <attribute name="rightSpeed = 0;" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>variable for the right motor speed</documentation>
   </attribute>
   <attribute name="collisionDetect = 0" type="int32_t" visibility="0x02" properties="0x00"/>
   <attribute name="prox = 0" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart properties="0x01">
    <initial target="../1">
     <action>lcd.clear();
lcd.print(&quot;set C&amp;B&quot;);
lcd.gotoXY(0, 1);
lcd.print(&quot;press A&quot;);</action>
     <initial_glyph conn="2,4,5,3,3">
      <action box="0,-2,4,2"/>
     </initial_glyph>
    </initial>
    <state name="start">
     <entry>if (buttonA.getSingleDebouncedPress()) {
    lcd.clear();
    QACTIVE_POST((QActive *)me,
    BUTTONA_SIG, 0U);
}

else if (buttonC.getSingleDebouncedPress()) {
    lcd.clear();
    QACTIVE_POST((QActive *)me,
    BUTTONC_SIG, 0U);
}

else if (buttonB.getSingleDebouncedPress()) {
    lcd.clear();
    QACTIVE_POST((QActive *)me,
    BUTTONB_SIG, 0U);
}

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC / 10U, 0U);</entry>
     <tran trig="BUTTONC" target="..">
      <action>if (me-&gt;prox &lt; 6U) {
    me-&gt;prox++;
}
else me-&gt;prox = 0;

lcd.print(&quot;s &quot;);
lcd.print(me-&gt;prox);</action>
      <tran_glyph conn="5,8,3,1,34">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTONB" target="..">
      <action>/*
if (me-&gt;collisionDetect &lt;= xyz) {
*/
    me-&gt;collisionDetect = me-&gt;collisionDetect + 100;
// }

lcd.print(&quot;cd &quot;);
lcd.print(me-&gt;collisionDetect);</action>
      <tran_glyph conn="5,12,3,1,34">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTONA" target="../4">
      <action>lcd.clear();</action>
      <tran_glyph conn="5,16,3,3,10">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="39,41,1,3,-34">
       <action box="-10,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="drive_control">
      <entry>compass.read();

/*
uint32_t result = sqrt(sq(compass.a.x) + sq(compass.a.y));

static uint32_t lastResult;
if (result &gt; lastResult) {
    lastResult = result;
}

lcd.clear();
lcd.print(&quot;r &quot;);
lcd.print(lastResult);

if(result &gt; me-&gt;collisionDetect) {
    QACTIVE_POST((QActive *)me, COLLISION_SIG, 0U);
}
*/

static int32_t lastX;
if (abs(compass.a.x) &gt; lastX) {
    lastX = abs(compass.a.x);
}

static int32_t lastY;
if (abs(compass.a.y) &gt; lastY) {
    lastY = abs(compass.a.y);
}

lcd.clear();
lcd.gotoXY(0, 0);
lcd.print(&quot;x &quot;);
lcd.print(lastX);
lcd.gotoXY(0, 1);
lcd.print(&quot;y &quot;);
lcd.print(lastY);

if((abs(compass.a.x) &gt; me-&gt;collisionDetect) ||
    (abs(compass.a.y) &gt; me-&gt;collisionDetect)) {
        QACTIVE_POST((QActive *)me, COLLISION_SIG, 0U);
}
else {
    QACTIVE_POST((QActive *)me, FREE_SIG, 0U);
}

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC / 10U, 0U);</entry>
      <tran trig="COLLISION" target="../3">
       <action>ledRed(1);
ledYellow(0);
ledGreen(0);</action>
       <tran_glyph conn="15,20,3,3,10">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="FREE" target="../4">
       <action>ledRed(0);
ledYellow(0);
ledGreen(1);</action>
       <tran_glyph conn="15,29,3,3,10">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="Q_TIMEOUT" target="..">
       <tran_glyph conn="37,36,1,3,-22">
        <action box="-11,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state name="stopp">
       <entry>motors.setSpeeds(0, 0);

QACTIVE_POST((QActive *)me, BACK_SIG, 0U);</entry>
       <tran trig="BACK" target="../../..">
        <tran_glyph conn="35,23,1,3,-30">
         <action box="-5,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="25,18,10,7">
        <entry box="1,2,4,2"/>
       </state_glyph>
      </state>
      <state name="drive">
       <entry>motors.setSpeeds((a * me-&gt;prox + e), (a * me-&gt;prox + e));</entry>
       <state_glyph node="25,27,10,6">
        <entry box="1,2,4,2"/>
       </state_glyph>
      </state>
      <state_glyph node="15,14,22,24">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state_glyph node="5,2,34,41">
      <entry box="1,2,4,2"/>
     </state_glyph>
    </state>
    <state_diagram size="41,45"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot;              // QP-nano framework
#include &quot;Arduino.h&quot;          // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::Zumo)
//...

// AO instances, other objects and event queue buffers for them...
Zumo AO_Zumo;

// Other objects
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ButtonB buttonB;
Zumo32U4ButtonC buttonC;
Zumo32U4Motors motors;
LSM303 compass;

static QEvt l_zumoQSto[10];   // Event queue storage for Zumo
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        {(QActive *)0,        (QEvt *)0,  0U               },
        {(QActive *)&amp;AO_Zumo, l_zumoQSto, Q_DIM(l_zumoQSto)}
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100U, // number of system clock ticks in one second


    // Funktionsgleichung: y = a * x + e
    a =  -50,                 // Steigung f√ºr's Regeln
    e = 300U,                 // Scheitelpunkt y
};

// various signals for the application...
enum {
    BUTTONA_SIG = Q_USER_SIG, // end of data
    BUTTONB_SIG,
    BUTTONC_SIG,
    COLLISION_SIG,
    FREE_SIG,
    BACK_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Zumo.super, Q_STATE_CAST(&amp;Zumo_initial));

    // init the compass for collision detection
    Wire.begin();
    compass.init();
    compass.enableDefault();
}

//............................................................................
void loop() {
    QF_run();                 // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0);           // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A);      // Interrupt enabled
TCNT4  = 0U;

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) { // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE();         // disable all interrupts
    QF_RESET();               // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Zumo)
//...
</text>
  </file>
 </directory>
</model>
