/*$file${.::Zumo.ino} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Zumo_v2.qm
* File:  ${.::Zumo.ino}
*
* This code has been generated by QM 4.5.0 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::Zumo.ino} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#include "qpn.h"     // QP-nano framework
#include "Arduino.h" // Arduino API

#include <Wire.h>
#include <Zumo32U4.h>

//============================================================================
// declare all AO classes...
/*$declare${AOs::ProxiSens} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::ProxiSens} ........................................................*/
typedef struct ProxiSens {
/* protected: */
    QActive super;
} ProxiSens;

/* protected: */
static QState ProxiSens_initial(ProxiSens * const me);
static QState ProxiSens_proxiSens(ProxiSens * const me);
static QState ProxiSens_measure(ProxiSens * const me);
static QState ProxiSens_notEqual(ProxiSens * const me);
static QState ProxiSens_avoid(ProxiSens * const me);
static QState ProxiSens_equal(ProxiSens * const me);
/*$enddecl${AOs::ProxiSens} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${AOs::Motors} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::Motors} ...........................................................*/
typedef struct Motors {
/* protected: */
    QActive super;

/* private: */
    uint16_t leftSpeed;
    uint16_t rightSpeed;
} Motors;

/* protected: */
static QState Motors_initial(Motors * const me);
static QState Motors_motors(Motors * const me);
static QState Motors_avoidLeft(Motors * const me);
static QState Motors_avoidRight(Motors * const me);
static QState Motors_turn(Motors * const me);
static QState Motors_accelerate(Motors * const me);
static QState Motors_control(Motors * const me);
/*$enddecl${AOs::Motors} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${AOs::HMI} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::HMI} ..............................................................*/
typedef struct HMI {
/* protected: */
    QActive super;
} HMI;

/* protected: */
static QState HMI_initial(HMI * const me);
static QState HMI_hmi(HMI * const me);
/*$enddecl${AOs::HMI} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
//...

/*$declare${AOs::leftBarrier} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
extern uint8_t leftBarrier;
/*$enddecl${AOs::leftBarrier} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$declare${AOs::rightBarrier} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
extern uint8_t rightBarrier;
/*$enddecl${AOs::rightBarrier} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/



// AO instances, other objects and event queue buffers for them...
ProxiSens AO_ProxiSens;
Motors AO_Motors;
HMI AO_HMI;

// Event queue storage...
static QEvt l_proxiSensQSto[10];
static QEvt l_motorsQSto[10];
static QEvt l_hmiQSto[10];
//...


// Other objects...
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
// Zumo32U4Encoders encoders;

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        { (QActive *)0,             (QEvt *)0,       0U                     },
        { (QActive *)&AO_ProxiSens, l_proxiSensQSto, Q_DIM(l_proxiSensQSto) },
        { (QActive *)&AO_Motors,    l_motorsQSto,    Q_DIM(l_motorsQSto)    },
        { (QActive *)&AO_HMI,       l_hmiQSto,       Q_DIM(l_hmiQSto)       }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second

    // https://rechneronline.de/funktionsgraphen/
    // Funktionsgleichung: y = a * (x - d) + e
    aR = -80,  // Steigung für's Regeln
    aA = -133, // Steigung für's Ausweichen
    d = 1U,    // Scheitelpunkt x
    e = 400U,  // Scheitelpunkt y

    turnSpeed = 80U // speed for turning around
};

// various signals for the application...
enum {
    START_SIG = Q_USER_SIG, // end of data
    EQUAL_SIG,
    NOT_EQUAL_SIG,
    AVOID_SIG,
    TURN_SIG,
    RIGHT_SIG,
    LEFT_SIG,
    ACC_SIG,
    CONTROL_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&AO_ProxiSens.super, Q_STATE_CAST(&ProxiSens_initial));
    QActive_ctor(&AO_Motors.super, Q_STATE_CAST(&Motors_initial));
    QActive_ctor(&AO_HMI.super, Q_STATE_CAST(&HMI_initial));

    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U << CS43) | (1U << CS41) | (1U << CS40); // CK/1024
TIMSK4 = (1U << OCIE4A); // Interrupt enabled

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
/*$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/* Check for the minimum required QP version */
#if (QP_VERSION < 650U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpn version 6.5.0 or higher required
#endif
/*$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${AOs::ProxiSens} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::ProxiSens} ........................................................*/
/*${AOs::ProxiSens::SM} ....................................................*/
static QState ProxiSens_initial(ProxiSens * const me) {
    /*${AOs::ProxiSens::SM::initial} */
    return Q_TRAN(&ProxiSens_proxiSens);
}
/*${AOs::ProxiSens::SM::proxiSens} .........................................*/
static QState ProxiSens_proxiSens(ProxiSens * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProxiSens::SM::proxiSens::START} */
        case START_SIG: {
            status_ = Q_TRAN(&ProxiSens_measure);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::ProxiSens::SM::proxiSens::measure} ................................*/
static QState ProxiSens_measure(ProxiSens * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProxiSens::SM::proxiSens::measure} */
        case Q_ENTRY_SIG: {
            proxSensors.read();
            leftBarrier =
                proxSensors.countsFrontWithLeftLeds();
            rightBarrier =
                proxSensors.countsFrontWithRightLeds();

            if (leftBarrier == rightBarrier) {
                QACTIVE_POST((QActive *)me, EQUAL_SIG, 0);
                }
            else {QACTIVE_POST((QActive *)me, NOT_EQUAL_SIG, 0);
                }

            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::ProxiSens::SM::proxiSens::measure::NOT_EQUAL} */
        case NOT_EQUAL_SIG: {
            status_ = Q_TRAN(&ProxiSens_notEqual);
            break;
        }
        /*${AOs::ProxiSens::SM::proxiSens::measure::EQUAL} */
        case EQUAL_SIG: {
            status_ = Q_TRAN(&ProxiSens_equal);
            break;
        }
        default: {
            status_ = Q_SUPER(&ProxiSens_proxiSens);
            break;
        }
    }
    return status_;
}
/*${AOs::ProxiSens::SM::proxiSens::measure::notEqual} ......................*/
static QState ProxiSens_notEqual(ProxiSens * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProxiSens::SM::proxiSens::measure::notEqual} */
        case Q_ENTRY_SIG: {
            if (leftBarrier <= 5U
                && rightBarrier <= 5U) {
                    QACTIVE_POST((QActive *)me, AVOID_SIG, 0);
                    }

            else {QACTIVE_POST((QActive *)&AO_Motors, TURN_SIG, 0);
                }
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::ProxiSens::SM::proxiSens::measure::notEqual::AVOID} */
        case AVOID_SIG: {
            status_ = Q_TRAN(&ProxiSens_avoid);
            break;
        }
        default: {
            status_ = Q_SUPER(&ProxiSens_measure);
            break;
        }
    }
    return status_;
}
/*${AOs::ProxiSens::SM::proxiSens::measure::notEqual::avoid} ...............*/
static QState ProxiSens_avoid(ProxiSens * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProxiSens::SM::proxiSens::measure::notEqual::avoid} */
        case Q_ENTRY_SIG: {
            if (leftBarrier > rightBarrier) {
                QACTIVE_POST((QActive *)&AO_Motors, RIGHT_SIG, 0);
                }

            else {
                QACTIVE_POST((QActive *)&AO_Motors, LEFT_SIG, 0);
                }
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&ProxiSens_notEqual);
            break;
        }
    }
    return status_;
}
/*${AOs::ProxiSens::SM::proxiSens::measure::equal} .........................*/
static QState ProxiSens_equal(ProxiSens * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProxiSens::SM::proxiSens::measure::equal} */
        case Q_ENTRY_SIG: {
            /* only work with the leftBarrier,
               because the equality check before says
               that the rightBarrier has same value */

            if (leftBarrier == 0) {
                    QACTIVE_POST((QActive *)&AO_Motors, ACC_SIG, 0);
                    }

            if (leftBarrier > 0 &&
                leftBarrier < 6U) {
                    QACTIVE_POST((QActive *)&AO_Motors, CONTROL_SIG, 0);
                    }
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&ProxiSens_measure);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::ProxiSens} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${AOs::Motors} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::Motors} ...........................................................*/
/*${AOs::Motors::SM} .......................................................*/
static QState Motors_initial(Motors * const me) {
    /*${AOs::Motors::SM::initial} */
    return Q_TRAN(&Motors_motors);
}
/*${AOs::Motors::SM::motors} ...............................................*/
static QState Motors_motors(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::RIGHT} */
        case RIGHT_SIG: {
            status_ = Q_TRAN(&Motors_avoidLeft);
            break;
        }
        /*${AOs::Motors::SM::motors::LEFT} */
        case LEFT_SIG: {
            status_ = Q_TRAN(&Motors_avoidRight);
            break;
        }
        /*${AOs::Motors::SM::motors::TURN} */
        case TURN_SIG: {
            status_ = Q_TRAN(&Motors_turn);
            break;
        }
        /*${AOs::Motors::SM::motors::ACC} */
        case ACC_SIG: {
            /*${AOs::Motors::SM::motors::ACC::[v<e]} */
            if (me->leftSpeed < e
                && me->rightSpeed < e)
            {
                status_ = Q_TRAN(&Motors_accelerate);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        /*${AOs::Motors::SM::motors::CONTROL} */
        case CONTROL_SIG: {
            status_ = Q_TRAN(&Motors_control);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Motors::SM::motors::avoidLeft} ....................................*/
static QState Motors_avoidLeft(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::avoidLeft} */
        case Q_ENTRY_SIG: {
            me->leftSpeed = aR * (rightBarrier - 1U) + e;
            me->rightSpeed = aA * (leftBarrier - 1U) + e;
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Motors_motors);
            break;
        }
    }
    return status_;
}
/*${AOs::Motors::SM::motors::avoidRight} ...................................*/
static QState Motors_avoidRight(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::avoidRight} */
        case Q_ENTRY_SIG: {
            me->leftSpeed = aA * (rightBarrier - 1) + e;
            me->rightSpeed = aR * (leftBarrier - 1) + e;
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Motors_motors);
            break;
        }
    }
    return status_;
}
/*${AOs::Motors::SM::motors::turn} .........................................*/
static QState Motors_turn(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::turn} */
        case Q_ENTRY_SIG: {
            if(leftBarrier == 6U) {
                me->leftSpeed = turnSpeed;
                me->rightSpeed = 0;
                }

            else {
                me->leftSpeed = 0;
                me->rightSpeed = turnSpeed;
                }
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Motors_motors);
            break;
        }
    }
    return status_;
}
/*${AOs::Motors::SM::motors::accelerate} ...................................*/
static QState Motors_accelerate(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::accelerate} */
        case Q_ENTRY_SIG: {
            me->leftSpeed = me->leftSpeed + 50U;
            me->rightSpeed = me->rightSpeed + 50U;

            motors.setSpeeds(me->leftSpeed, me->rightSpeed);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Motors_motors);
            break;
        }
    }
    return status_;
}
/*${AOs::Motors::SM::motors::control} ......................................*/
static QState Motors_control(Motors * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Motors::SM::motors::control} */
        case Q_ENTRY_SIG: {
            me->leftSpeed = aR * (rightBarrier - d) + e;
            me->rightSpeed = aR * (leftBarrier - d) + e;

            motors.setSpeeds(me->leftSpeed, me->rightSpeed);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Motors_motors);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::Motors} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*$define${AOs::HMI} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${AOs::HMI} ..............................................................*/
/*${AOs::HMI::SM} ..........................................................*/
static QState HMI_initial(HMI * const me) {
    /*${AOs::HMI::SM::initial} */
    lcd.print("press A");
    return Q_TRAN(&HMI_hmi);
}
/*${AOs::HMI::SM::hmi} .....................................................*/
static QState HMI_hmi(HMI * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::HMI::SM::hmi} */
        case Q_ENTRY_SIG: {
            if (buttonA.isPressed()) {
                QACTIVE_POST((QActive *)&AO_ProxiSens,
                    START_SIG, 0);
                lcd.clear();
                }

            QActive_armX((QActive *)me,
                0U, BSP_TICKS_PER_SEC, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HMI::SM::hmi} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HMI::SM::hmi::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&HMI_hmi);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::HMI} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
//...
