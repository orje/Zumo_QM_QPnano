<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.1" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Zumo" superclass="qpn::QActive">
   <attribute name="leftSpeed = 0;" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="rightSpeed = 0;" type="uint16_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>ledYellow(1);
lcd.print(&quot;press A&quot;);</action>
     <initial_glyph conn="4,4,5,0,2,2">
      <action box="0,-2,4,2"/>
     </initial_glyph>
    </initial>
    <state name="button">
     <entry>QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC / 10U, 0U);

if (buttonA.isPressed()) {
    QACTIVE_POST((QActive *)me,
    BUTTON_PRESSED_SIG, 0);
    }</entry>
     <exit>QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="4,16,3,1,20,-8,-2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTON_PRESSED" target="../../2">
      <action>ledYellow(0);
ledGreen(1);
lcd.clear();</action>
      <tran_glyph conn="4,20,3,3,22,-12,4">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,6,18,16">
      <entry box="1,2,4,2"/>
      <exit box="1,4,4,2"/>
     </state_glyph>
    </state>
    <state name="motors">
     <entry>QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC, 0U);

motors.setSpeeds(me-&gt;leftSpeed, me-&gt;rightSpeed);</entry>
     <exit>QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="Q_TIMEOUT" target="../../3">
      <tran_glyph conn="30,16,3,3,13,-8,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="30,6,11,12">
      <entry box="1,2,4,2"/>
      <exit box="1,4,4,2"/>
     </state_glyph>
    </state>
    <state name="sensors">
     <entry>uint8_t l, r, s;
uint16_t v;

proxSensors.read();

l = proxSensors.countsFrontWithLeftLeds();
r = proxSensors.countsFrontWithRightLeds();

s = (l + r) / 2U;

v = 400U - (s * 400U / 6U);

me-&gt;leftSpeed = v;
me-&gt;rightSpeed = v;

QACTIVE_POST((QActive *)me, SPEED_SIG, 0U);</entry>
     <tran trig="SPEED" target="../../2">
      <tran_glyph conn="45,14,3,3,10,6,-27,-10,2">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="45,6,8,10">
      <entry box="1,2,4,2"/>
     </state_glyph>
    </state>
    <state_diagram size="58,24"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot; // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::Zumo)
//...

// AO instances, other objects and event queue buffers for them...
Zumo AO_Zumo;

// Other objects
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
Zumo32U4Encoders encoders;

static QEvt l_zumoQSto[10]; // Event queue storage for Zumo
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        { (QActive *)0,           (QEvt *)0,      0U                },
        { (QActive *)&amp;AO_Zumo,    l_zumoQSto,     Q_DIM(l_zumoQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100 // number of system clock ticks in one second
};

// various signals for the application...
enum {
    BUTTON_PRESSED_SIG = Q_USER_SIG, // end of data
    SPEED_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Zumo.super, Q_STATE_CAST(&amp;Zumo_initial));

    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A); // Interrupt enabled

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Zumo)
//...
</text>
  </file>
 </directory>
</model>
