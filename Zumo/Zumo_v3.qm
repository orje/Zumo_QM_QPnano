<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.0" links="0">
 <documentation>https://rechneronline.de/funktionsgraphen/</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="HMI" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action brief="show interaction">lcd.print(&quot;press A&quot;);</action>
     <initial_glyph conn="2,3,5,0,2,2">
      <action box="0,-2,15,2"/>
     </initial_glyph>
    </initial>
    <state name="hmi">
     <entry brief="cyclic button check, clear display, start timeout">if (buttonA.isPressed()) {
    QACTIVE_POST((QActive *)&amp;AO_Sensors,
        SENSORS_SIG, 0);
    lcd.clear();
    }

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC, 0U);</entry>
     <exit brief="stop timeout">QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="2,17,3,1,17">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,17,14">
      <entry box="1,2,16,6"/>
      <exit box="1,8,13,2"/>
     </state_glyph>
    </state>
    <state_diagram size="21,21"/>
   </statechart>
  </class>
  <class name="Sensors" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <initial_glyph conn="2,3,5,0,2,2">
      <action box="0,-2,4,2"/>
     </initial_glyph>
    </initial>
    <state name="Sensors">
     <tran trig="START" target="../1">
      <tran_glyph conn="2,9,3,0,3,2">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <state name="measureProxiSens">
      <entry brief="measure, post">proxSensors.read();

QACTIVE_POST((QActive *)&amp;AO_Motors,
    PROXIMITY_SIG,
        proxSensors.countsFrontWithLeftLeds() &lt;&lt; 8U
        | proxSensors.countsFrontWithRightLeds()
    );</entry>
      <state_glyph node="3,11,15,8">
       <entry box="1,2,9,4"/>
      </state_glyph>
     </state>
     <state_glyph node="2,5,18,16"/>
    </state>
    <state_diagram size="22,23"/>
   </statechart>
  </class>
  <class name="Motors" superclass="qpn::QActive">
   <attribute name="leftProxi" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="rightProxi" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="leftSpeed" type="uint16_t" visibility="0x02" properties="0x00"/>
   <attribute name="rightSpeed" type="uint16_t" visibility="0x02" properties="0x00"/>
   <statechart properties="0x01">
    <initial target="../1">
     <initial_glyph conn="2,3,5,0,2,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="motors">
     <tran trig="ACC">
      <choice target="../../5">
       <guard brief="v&lt;e">me-&gt;leftSpeed &lt; e
&amp;&amp; me-&gt;rightSpeed &lt; e</guard>
       <choice_glyph conn="51,53,5,0,-9,2">
        <action box="-5,1,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="62,56,1,-1,2,-3,-13">
       <action box="-6,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PROXIMITY" target="../7">
      <tran_glyph conn="2,10,3,0,4,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="avoidLeft">
      <entry>me-&gt;leftSpeed = aR * (rightProxi - 1U) + e;
me-&gt;rightSpeed = aA * (leftProxi - 1U) + e;</entry>
      <state_glyph node="8,41,10,6">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state name="avoidRight">
      <entry>me-&gt;leftSpeed = aA * (rightProxi - 1) + e;
me-&gt;rightSpeed = aR * (leftProxi - 1) + e;</entry>
      <state_glyph node="6,51,10,9">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state name="turn">
      <entry>if(leftProxi == 6U) {
    me-&gt;leftSpeed = turnSpeed;
    me-&gt;rightSpeed = 0;
    }

else {
    me-&gt;leftSpeed = 0;
    me-&gt;rightSpeed = turnSpeed;
    }</entry>
      <state_glyph node="7,63,10,6">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state name="accelerate">
      <entry>me-&gt;leftSpeed = me-&gt;leftSpeed + 50U;
me-&gt;rightSpeed = me-&gt;rightSpeed + 50U;

motors.setSpeeds(me-&gt;leftSpeed, me-&gt;rightSpeed);</entry>
      <state_glyph node="33,55,11,6">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state name="control">
      <entry>me-&gt;leftSpeed = aR * (rightProxi - d) + e;
me-&gt;rightSpeed = aR * (leftProxi - d) + e;

motors.setSpeeds(me-&gt;leftSpeed, me-&gt;rightSpeed);</entry>
      <state_glyph node="33,63,11,6">
       <entry box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state name="decompUdecide">
      <documentation>Beispiel für die Auswertung und Weiterleitung
eines Eventsignales und seines Parameters.

Das Signal:
QACTIVE_POST(&amp;AO_Tunnel, SHIP_IMG_SIG,
	(SHIP_BMP &lt;&lt; 16)
	| me-&gt;x
	| ((me-&gt;y &gt;&gt; 2) &lt;&lt; 8));

Auswertung/Übernahme der
Parameterwerte in Ziel AO:
uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);

Weiterleitung von des Signales
und seines Parameters:
Funktion(me, Q_SIG(me), Q_PAR(me));</documentation>
      <entry>me-&gt;leftProxi = (Q_PAR(me) &gt;&gt; 8U);
me-&gt;rightProxi = (Q_PAR(me) &amp; 255U);</entry>
      <state_glyph node="4,12,30,25">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,5,60,72"/>
    </state>
    <state_diagram size="73,82"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::Sensors)
$declare(AOs::Motors)
$declare(AOs::HMI)
//...

// AO instances, other objects and event queue buffers for them...
Sensors AO_Sensors;
Motors AO_Motors;
HMI AO_HMI;

// Event queue storage...
static QEvt l_sensorsQSto[10];
static QEvt l_motorsQSto[10];
static QEvt l_hmiQSto[10];
//...


// Other objects...
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
// Zumo32U4Encoders encoders;

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        { (QActive *)0,           (QEvt *)0,     0U                   },
        { (QActive *)&amp;AO_Sensors, l_sensorsQSto, Q_DIM(l_sensorsQSto) },
        { (QActive *)&amp;AO_Motors,  l_motorsQSto,  Q_DIM(l_motorsQSto)  },
        { (QActive *)&amp;AO_HMI,     l_hmiQSto,     Q_DIM(l_hmiQSto)     }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second

    // https://rechneronline.de/funktionsgraphen/
    // Funktionsgleichung: y = a * (x - d) + e
    aR = -80,  // Steigung für's Regeln
    aA = -133, // Steigung für's Ausweichen
    d = 1U,    // Scheitelpunkt x
    e = 400U,  // Scheitelpunkt y

    turnSpeed = 80U // speed for turning around
};

// various signals for the application...
enum {
    SENSORS_SIG = Q_USER_SIG, // end of data
    PROXIMITY_SIG,
    EQUAL_SIG,
    NOT_EQUAL_SIG,
    AVOID_SIG,
    TURN_SIG,
    RIGHT_SIG,
    LEFT_SIG,
    ACC_SIG,
    CONTROL_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Sensors.super, Q_STATE_CAST(&amp;Sensors_initial));
    QActive_ctor(&amp;AO_Motors.super,  Q_STATE_CAST(&amp;Motors_initial));
    QActive_ctor(&amp;AO_HMI.super,     Q_STATE_CAST(&amp;HMI_initial));

    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A); // Interrupt enabled

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Sensors)
$define(AOs::Motors)
$define(AOs::HMI)
//...
</text>
  </file>
 </directory>
</model>
