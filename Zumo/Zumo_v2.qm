<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.0" links="0">
 <documentation>https://rechneronline.de/funktionsgraphen/</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="ProxiSens" superclass="qpn::QActive"/>
  <class name="Motors" superclass="qpn::QActive"/>
  <class name="HMI" superclass="qpn::QActive"/>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::ProxiSens)
$declare(AOs::Motors)
$declare(AOs::HMI)
//...

// AO instances, other objects and event queue buffers for them...
ProxiSens AO_ProxiSens;
Motors AO_Motors;
HMI AO_HMI;

// Event queue storage...
static QEvt l_proxiSensQSto[10];
static QEvt l_motorsQSto[10];
static QEvt l_hmiQSto[10];
//...


// Other objects...
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
// Zumo32U4Encoders encoders;

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        { (QActive *)0,             (QEvt *)0,       0U                     },
        { (QActive *)&amp;AO_ProxiSens, l_proxiSensQSto, Q_DIM(l_proxiSensQSto) },
        { (QActive *)&amp;AO_Motors,    l_motorsQSto,    Q_DIM(l_motorsQSto)    },
        { (QActive *)&amp;AO_HMI,       l_hmiQSto,       Q_DIM(l_hmiQSto)       }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second

    barrierIsLeft = 1U;       // memory for actual side of barrier
    turnSpeed = 80U;

    // https://rechneronline.de/funktionsgraphen/
    // Funktionsgleichung: y = a * (x - d) + e
    aR = -80,  // Steigung für's Regeln
    aA = -133, // Steigung für's Ausweichen
    d = 1U,    // Scheitelpunkt x
    e = 400U,  // Scheitelpunkt y
};

// various signals for the application...
enum {
    BUTTON_SIG = Q_USER_SIG, // end of data
    DECIDE_SIG,
    DRIVE_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_ProxiSens.super, Q_STATE_CAST(&amp;ProxiSens_initial));
    QActive_ctor(&amp;AO_Motors.super, Q_STATE_CAST(&amp;Motors_initial));
    QActive_ctor(&amp;AO_HMI.super, Q_STATE_CAST(&amp;HMI_initial));

    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A); // Interrupt enabled

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::ProxiSens)
$define(AOs::Motors)
$define(AOs::HMI)
//...
</text>
  </file>
 </directory>
</model>
