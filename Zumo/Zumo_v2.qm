<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.0" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Zumo" superclass="qpn::QActive">
   <documentation>https://rechneronline.de/funktionsgraphen/</documentation>
   <attribute name="leftBarrier" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="rightBarrier" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="leftSpeed" type="int16_t" visibility="0x02" properties="0x00"/>
   <attribute name="rightSpeed" type="int16_t" visibility="0x02" properties="0x00"/>
   <statechart properties="0x01">
    <initial target="../1">
     <action brief="display">lcd.print(&quot;press A&quot;);</action>
     <initial_glyph conn="4,3,5,0,2,2">
      <action box="0,-2,8,2"/>
     </initial_glyph>
    </initial>
    <state name="run">
     <documentation>zyklische Abfrage des Tasters bis Betätigung</documentation>
     <entry brief="check button, start time">if (buttonA.isPressed()) {
    QACTIVE_POST((QActive *)me,
    BUTTON_SIG, 0);
    }

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC/10U, 0U);</entry>
     <exit brief="end time">QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="BUTTON" target="../2">
      <action brief="clear display">lcd.clear();</action>
      <tran_glyph conn="4,16,3,3,10">
       <action box="0,-4,12,4"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="4,54,3,1,61">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state name="measure">
      <documentation>zyklisches Messen und ergebnisabhängiges Ansteuern der Motoren</documentation>
      <entry brief="read sensors, start time">proxSensors.read();
me-&gt;leftBarrier =
    proxSensors.countsFrontWithLeftLeds();
me-&gt;rightBarrier =
    proxSensors.countsFrontWithRightLeds();

QACTIVE_POST((QActive *)me, DRIVE_SIG, 0);

QActive_armX((QActive *)me,
    0U, BSP_TICKS_PER_SEC/10U, 0U);</entry>
      <exit brief="end time">QActive_disarmX((QActive *)me, 0U);</exit>
      <tran trig="Q_TIMEOUT" target="..">
       <tran_glyph conn="14,48,3,1,49">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="14,14,49,36">
       <entry box="1,2,20,2"/>
       <exit box="1,4,10,2"/>
      </state_glyph>
     </state>
     <state_glyph node="4,5,61,51">
      <entry box="1,2,20,2"/>
      <exit box="1,4,10,2"/>
     </state_glyph>
    </state>
    <state_diagram size="67,58"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Zumo.ino">
   <text>#include &quot;qpn.h&quot; // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &lt;Wire.h&gt;
#include &lt;Zumo32U4.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::Zumo)
//...

// AO instances, other objects and event queue buffers for them...
Zumo AO_Zumo;

// Other objects
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ProximitySensors proxSensors;
Zumo32U4Motors motors;
// Zumo32U4Encoders encoders;

static QEvt l_zumoQSto[10]; // Event queue storage for Zumo
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
        { (QActive *)0,        (QEvt *)0,  0U                },
        { (QActive *)&amp;AO_Zumo, l_zumoQSto, Q_DIM(l_zumoQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second

    // https://rechneronline.de/funktionsgraphen/
    // Funktionsgleichung: y = a * (x - d) + e
    a = -80,   // Steigung
    d = 1U,    // Scheitelpunkt x
    e = 400U,  // Scheitelpunkt y
};

// various signals for the application...
enum {
    BUTTON_SIG = Q_USER_SIG, // end of data
    DECIDE_SIG,
    DRIVE_SIG
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Zumo.super, Q_STATE_CAST(&amp;Zumo_initial));

    proxSensors.initFrontSensor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
// 1/1024 prescaler, interrupt enabling...
TCCR4B = (1U &lt;&lt; CS43) | (1U &lt;&lt; CS41) | (1U &lt;&lt; CS40); // CK/1024
TIMSK4 = (1U &lt;&lt; OCIE4A); // Interrupt enabled

// set the output-compare register based on the desired tick frequency
OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Zumo)
//...
</text>
  </file>
 </directory>
</model>
